-- objective of this game is to keep wak a mole so that the score doesn't go down to 0 before the time runs out.
-- gets harder and harder by first decreasing the score itself, and then after some point, making the mole pops faster and faster
 

Library IEEE;
use IEEE.STD_Logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
--use ieee.numeric_std.all;
use ieee.math_real.all; -- library with type rand
--use work.drawing.all;

 
entity box is
 
    port(
        clk      : in   std_logic; --clock
        reset : in std_logic;
        btn1 : in   std_logic; --starts game/button 1
        btn2: in    std_logic; --button 2/resets the screen..to the start screen
        btn3: in    std_logic; --button 3
        btn4: in    std_logic; --button 4
        seglight1: out std_logic_vector(6 downto 0); --hex display drivers
        seglight2: out std_logic_vector(6 downto 0);
        seglight3: out std_logic_vector(6 downto 0);
        seglight4: out std_logic_vector(6 downto 0);
        hsync : out std_logic; -- sync horizontal information
        vsync : out std_logic; -- sync vertical information
        r : out std_logic_vector(3 downto 0); --red channel
        g : out std_logic_vector(3 downto 0); --green channel
        b : out std_logic_vector(3 downto 0) --blue channel
		--  enable       : in std_logic; -- Display Enable
    );
 
end entity;
 
architecture rtl of box is
  component vgadrive is
    port( clock          : in std_logic;  -- 25.175 Mhz clock
        red, green, blue : in std_logic_vector(3 downto 0);  -- input values for RGB signals
        row, column      : out std_logic_vector(9 downto 0); -- for current pixel
        Rout, Gout, Bout : out std_logic_vector(3 downto 0);
		  H, V : out std_logic); -- VGA drive signals
  end component;
  
  -- linear shift register
  component lfsr is
    port( clk :in std_logic;
		reset :in std_logic;
	 cout :out std_logic_vector(7 downto 0)
		);
  end component;
 
  component lfsr2 is
    port( clk :in std_logic;
		reset :in std_logic;
	 cout :out std_logic_vector(7 downto 0)
		);
  end component;

  component lfsr3 is
    port( clk :in std_logic;
		reset :in std_logic;
	 cout :out std_logic_vector(7 downto 0)
		);
  end component; 

  component lfsr4 is
    port( clk :in std_logic;
		reset :in std_logic;
	 cout :out std_logic_vector(7 downto 0)
		);
  end component;  
  
  -- seglight displayer
  component displayer is
  port (
		a	   : in std_logic_vector (4 downto 0);
		result1 : out std_logic_vector (6 downto 0);
		result2 : out std_logic_vector (6 downto 0)
	);
	end component;
	
	component displayerScore is
  port (
		a	   : in std_logic_vector (4 downto 0);
		result1 : out std_logic_vector (6 downto 0);
		result2 : out std_logic_vector (6 downto 0)
	);
	end component;
  
  -- Build an enumerated type for the state machine
    type state_type is (L0, L1, L2, L3);
 
    -- Register to hold the current state
    signal state   : state_type;
    signal timeLimit : std_logic_vector(4 downto 0);
    signal score : std_logic_vector(4 downto 0);
    signal scoreStart : std_logic_vector(4 downto 0);
    signal minScoreStart : std_logic_vector(4 downto 0);
    signal threshold: unsigned(3 downto 0) ;
    signal hole1: std_logic;
    signal hole2: std_logic;
    signal hole3: std_logic;
    signal hole4: std_logic;
    signal count: integer := 0; -- used to increment with every loop and used to keep the moles popped for a certain length of time
    signal moleDuration: integer := 1000; -- change the integer value to control the duration of the mole popping
    signal popped1: boolean := false;
    signal popped2: boolean := false;
    signal popped3: boolean := false;
    signal popped4: boolean := false;
    signal popTime1: integer := 0;
    signal popTime2: integer := 0;
    signal popTime3: integer := 0;
    signal popTime4: integer := 0;
    signal molePop1 : integer := 0;
    signal molePop2 : integer := 0;
    signal molePop3 : integer := 0;
    signal molePop4 : integer := 0;
	 signal hit1 : boolean := false;
	 signal hit2 : boolean := false;
	 signal hit3 : boolean := false;
	 signal hit4 : boolean := false;
	 
	 signal gameStart : boolean := true;
	 signal counter: unsigned(42 downto 0);
	 signal slowclock: std_logic;

--    shared variable seed1: integer := 0;
--    shared variable seed2: integer := 1;-- seed values for random generator
--    shared variable rand1: real;   -- random real-number value in range 0 to 1.0  
--    shared variable rand2: real;
--    shared variable rand3: real;
--    shared variable rand4: real;
    --variable rand1: integer := 1;
    signal range_of_rand : real := 100.0;    -- the range of random values created will be 0 to +100.
	 
	 
	 signal displaySwitch: std_logic_vector(1 downto 0);
	 
	 signal draw: std_logic; 
	 signal red, green, blue : std_logic_vector(3 downto 0);
	 signal row, column : std_logic_vector(9 downto 0);
	 signal hpos: integer range 0 to 1280:=0;
	 signal vpos: integer range 0 to 960:=0;
	 
	 
	 signal psuedoRand1: std_logic_vector(7 downto 0);
	 signal psuedoRand2: std_logic_vector(7 downto 0);
	 signal psuedoRand3: std_logic_vector(7 downto 0);
	 signal psuedoRand4: std_logic_vector(7 downto 0);
 
begin
   -- for debugging: to view the bit order
  VGA : component vgadrive
    port map ( clock => clk, red => red, green => green, blue => blue,
               row => row, column => column,
               Rout => r, Gout => g, Bout => b, H => hsync, V => vsync); 
   PsuedoRandom1 : component lfsr
	 port map (clk => clk, reset => reset, cout => psuedoRand1);
	
	PsuedoRandom2 : component lfsr
	 port map (clk => clk, reset => reset, cout => psuedoRand2);
	 
   PsuedoRandom3 : component lfsr
	 port map (clk => clk, reset => reset, cout => psuedoRand3);
	 
   PsuedoRandom4 : component lfsr
	 port map (clk => clk, reset => reset, cout => psuedoRand4);
	 
	SegDisplay : component displayer -- timeLimit
	 port map (a => timeLimit, result1 => seglight3, result2 => seglight4);
	 
	SegDisplayScore : component displayerScore -- timeLimit
	 port map (a => score, result1 => seglight1, result2 => seglight2);
	 
	 -- Logic to advance to the next state
    process (clk, reset, row, column)
    begin
		  if reset = '0' then
            state <= L0;
        elsif (rising_edge(clk)) then	
				case state is
                when L0=> -- Start Screen
                    -- set all the initial values
                    score <= "10000"; -- initial score
                    scoreStart <= "10000"; -- has to be the same as above
                    minScoreStart <= "00100";
                    displaySwitch <= "00";
						  timeLimit <= "11110";
						  
						 if  row < 360 and column < 20  then
							red <= "1111";
							blue <= "0110";
							green <= "0010";
						 
						 elsif  row < 360 and column > 250 and column < 640  then
							green <= "1111";
						 
						 elsif  row > 120 and row < 480 and column > 150 and column < 500  then
							blue <= "1111";
						else
							red <= "0000";
							blue <= "0000";
							green <= "0000";
						end if;
						  
						  if btn1 = '0' then --when button one is pressed, start the game
                        gameStart <= true;
								state <= L1;
                    end if;
                   
                when L1=> --Level One, threshold controller, decreases threshold to a minimum value on each level/pass
                    if gameStart = true then
							gameStart <= false;
							timeLimit <= "11110"; -- do this like lfsr because it is not affected by changes in wak.vhd
							score <= scoreStart; -- use the same logic as the timeLimit but make sure it starts from 15 
						  end if;
						  
                    if slowclock = '1' then
								timeLimit <= timeLimit - "00001"; -- decrement the time, but make sure I fix this so that it decrements every 1 second or so
								score <= score - "00001"; -- decrement the score, but make sure I fix this so that it decrements every 1 second or so
							end if;
						  
							if popped1 = false then
								molePop1 <= conv_integer(psuedoRand1)*100/255;
							end if;
							if popped1 = false then
								molePop2 <= conv_integer(psuedoRand2)*100/255;
							end if;
							if popped1 = false then
								molePop3 <= conv_integer(psuedoRand3)*100/255;
							end if;
							if popped1 = false then
								molePop4 <= conv_integer(psuedoRand4)*100/255;
							end if;
							-- the random mole popping for all 4 moles is done here
                        count <= count + 1; -- used to measure the length of mole popping time

                        if molePop1 > 50 and popped1 = false then -- pop the mole up, 20% chance of mole popping
									 popped1 <= true;
                            popTime1 <= count;
                        --  hole1 <= 1; -- need to figure out how to keep this at 1 and return it to 0 after a certain time passes
                        end if;
                        if molePop2 > 80 and popped2 = false then -- pop the mole up, 20% chance of mole popping
                            popped2 <= true;
                            popTime2 <= count;
                        --  hole2 <= 1;
                        end if;
                        if molePop3 > 80 and popped3 = false then -- pop the mole up, 20% chance of mole popping
                            popped3 <= true;
                            popTime3 <= count;
                        --  hole3 <= 1;
                        end if;
                        if molePop4 > 80 and popped4 = false then -- pop the mole up, 20% chance of mole popping
                            popped4 <= true;
                            popTime4 <= count;
                        --  hole4 <= 1;
                        end if;
								
								-- drawing the moles
								
								if  (row > 330 and row < 360 and column < 120) or (row < 330 and row > 300 and column >10 and column < 110) or 
								(row < 300 and row > 270 and column > 20 and column < 100) or (row < 270 and row > 240 and column > 30 and column < 90) or 
								(row < 240 and row > 210 and column > 30 and column < 80) or (row < 210 and row > 180 and column >40 and column < 70) or 
								(row < 150 and row > 120 and column > 50 and column < 60) or (row < 90 and row > 60 and column >53 and column < 57) then --position of mole 1
									if popped1 = true then
										red <= "1111";
										blue <= "0110";
										green <= "0010";
									elsif popped1 = false then
										red <= "0000";
										blue <= "0000";
										green <= "0000";
									end if;
								elsif row > 120 and row < 360 and column > 150 and column < 270 then --position of mole 2
									if popped2 = true then
										red <= "0000";
										blue <= "1111";
										green <= "1111";
									else
										red <= "0000";
										blue <= "0000";
										green <= "0000";
									end if;
								elsif row > 120 and row < 360 and column > 300 and column < 420 then --position of mole 3
									if popped3 = true then
										red <= "0000";
										blue <= "1111";
										green <= "1111";
									else
										red <= "0000";
										blue <= "0000";
										green <= "0000";
									end if;
								elsif row > 120 and row < 360 and column > 450 and column < 570 then --position of mole 4
									if popped1 = true then
										red <= "0000";
										blue <= "1111";
										green <= "1111";
									else
										red <= "0000";
										blue <= "0000";
										green <= "0000";
									end if;
								else
									red <= "0000";
									blue <= "0000";
									green <= "0000";
								end if;
						
                       
							  if (count - popTime1 = moleDuration) and popped1 = true then -- the mole goes down!!! moleDuration controls the duration of mole popping
                            popped1 <= false;
									 hit1 <= false;
                        --  hole1 <= 0;
                        end if;
                        if (count - popTime2 = moleDuration) and popped2 = true then
                            popped2 <= false;
									 hit2 <= false;
                        --  hole2 <= 0;
                        end if;
                        if (count - popTime3 = moleDuration) and popped3 = true then
                            popped3 <= false;
									 hit3 <= false;
                        --  hole3 <= 0;
                        end if;
                        if (count - popTime4 = moleDuration) and popped4 = true then
                            popped4 <= false;
									 hit4 <= false;
                        --  hole4 <= 0;
                        end if;
--                       
                        -- check if the player hit a mole, decrement the score if so
                        if popped1 = true and btn1 = '0' and hit1 = false then
                            hit1 <= true; -- making sure that it hits it only once per button push
									 score <= score + 1;
                        end if;
                        if popped2 = true and btn2 = '0' and hit2 = false then
									hit2 <= true;
                            score <= score + 1;
                        end if;
                        if popped3 = true and btn3 = '0' and hit3 = false then
									hit3 <= true;
                            score <= score + 1;
                        end if;
                        if popped4 = true and btn4 = '0' and hit4 = false then
									hit4 <= true;
                            score <= score + 1;
                        end if;
                       
                        -- all the possible ways to go to the next level or gameover
--                        if score = 0 then --if the score equals the threshold, game over
--										state <= L3;
--                        elsif timeLimit = 0 and score > 0 then -- goes to next level
--                            if scoreStart > minScoreStart then
--                               gameStart <= true; 
--											scoreStart <= scoreStart - 1;
--                                state <= L1;
--                            elsif scoreStart = minScoreStart then
--                               gameStart <= true; 
--											moleDuration <= moleDuration - 10; --change the speed of the moles
--                                state <= L2;
--                            end if;
--                        end if;


							-- timeLimit and score segmented light
							
                when L2=> --Level Two, mole controller, augments mole speed when the starting score hits minimum value
                    timeLimit <= "10000";
                    score <= scoreStart;
							timeLimit <= timeLimit - 1; -- decrement the time, but make sure I fix this so that it decrements every 1 second or so
							score <= score - 1; -- decrement the score, but make sure I fix this so that it decrements every 1 second or so
						  
							-- the random mole popping for all 4 moles is done here
							count <= count + 1; -- used to measure the length of mole popping time
--                        uniform(seed1, seed2, rand1);   -- generate random number
--                        uniform(seed1, seed2, rand2);
--                        uniform(seed1, seed2, rand3);
--                        uniform(seed1, seed2, rand4);
--                        molePop1 <= integer(rand1*range_of_rand);  -- rescale to 0..100, convert integer part
--                        molePop2 <= integer(rand2*range_of_rand);
--                        molePop3 <= integer(rand3*range_of_rand);
--                        molePop4 <= integer(rand4*range_of_rand);
							if molePop1 > 50 and popped1 = false then -- pop the mole up, 20% chance of mole popping
								 popped1 <= true;
								 popTime1 <= count;
							--  hole1 <= 1; -- need to figure out how to keep this at 1 and return it to 0 after a certain time passes
							end if;
							if molePop2 > 80 and popped2 = false then -- pop the mole up, 20% chance of mole popping
								 popped2 <= true;
								 popTime2 <= count;
							--  hole2 <= 1;
							end if;
							if molePop3 > 80 and popped3 = false then -- pop the mole up, 20% chance of mole popping
								 popped3 <= true;
								 popTime3 <= count;
							--  hole3 <= 1;
							end if;
							if molePop4 > 80 and popped4 = false then -- pop the mole up, 20% chance of mole popping
								 popped4 <= true;
								 popTime4 <= count;
							--  hole4 <= 1;
							end if;
							if (count - popTime1 = moleDuration) and popped1 = true then -- the mole goes down!!! moleDuration controls the duration of mole popping
								 popped1 <= false;
							--  hole1 <= 0;
							end if;
							if (count - popTime2 = moleDuration) and popped2 = true then
								 popped2 <= false;
							--  hole2 <= 0;
							end if;
							if (count - popTime3 = moleDuration) and popped3 = true then
								 popped3 <= false;
							--  hole3 <= 0;
							end if;
							if (count - popTime4 = moleDuration) and popped4 = true then
								 popped4 <= false;
							--  hole4 <= 0;
							end if;
						  
							-- check if the player hit a mole, decrement the score if so
							if popped1 = true and btn1 = '0' then
								 score <= score + 1;
							end if;
							if popped2 = true and btn2 = '0' then
								 score <= score + 1;
							end if;
							if popped3 = true and btn3 = '0' then
								 score <= score + 1;
							end if;
							if popped4 = true and btn4 = '0' then
								 score <= score + 1;
							end if;
						  
							-- all the possible ways to go to the next level or gameover
							if score = 0 then --if the score equals the threshold, game over
								 state <= L3;
							elsif timeLimit = 0 and score > 0 then -- goes to next level
								 moleDuration <= moleDuration - 10; --change the speed of the moles
								 state <= L2;
							end if;
                when L3=> -- gameover screen
                    if btn1 = '0' then
                        state <= L0;
                    end if;
            end case;
        end if;
    end process;
	 
	 process(clk, reset) 
    begin
      if reset = '0' then
        counter <= "0000000000000000000000000000000000000000000";
      elsif (rising_edge(clk)) then
			counter <= counter + "0000000000000000000000000000000001000000000";
		end if;
	end process;
	
  slowclock <= counter(42);
end rtl;